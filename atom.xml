<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>冷子欲-前端博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.lengziyu.com/"/>
  <updated>2016-10-23T12:52:31.104Z</updated>
  <id>http://blog.lengziyu.com/</id>
  
  <author>
    <name>lengziyu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>fetch 学习笔记</title>
    <link href="http://blog.lengziyu.com/2016/10/23/ajax-to-fetch/"/>
    <id>http://blog.lengziyu.com/2016/10/23/ajax-to-fetch/</id>
    <published>2016-10-23T11:58:14.000Z</published>
    <updated>2016-10-23T12:52:31.104Z</updated>
    
    <content type="html"><![CDATA[<p>XMLHttpRequest 是一个设计粗糙的 API，不符合关注分离（Separation of Concerns）的原则，配置和调用方式非常混乱，而且基于事件的异步模型写起来也没有现代的 Promise，generator/yield，async/await 友好。<br><a id="more"></a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>npm ：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm <span class="keyword">install</span> whatwg-<span class="keyword">fetch</span> <span class="comment">--save</span></div></pre></td></tr></table></figure></p>
<p>如果你项目在node.js环境运行，可以使用 <a href="https://github.com/bitinn/node-fetch" target="_blank" rel="external">node-fetch</a>.</p>
<p>对于 babel 和 es2015+，可以这样导入 fetch：<br><figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">import <span class="string">'whatwg-fetch'</span>;</div><div class="line"><span class="function"><span class="title">fetch</span>(<span class="params">...</span>)</span>;</div></pre></td></tr></table></figure></p>
<h2 id="兼容性及解决方案"><a href="#兼容性及解决方案" class="headerlink" title="兼容性及解决方案"></a>兼容性及解决方案</h2><p>原生支持率并不高，幸运的是，引入下面这些 <code>polyfill</code> 后可以完美支持 IE8+ ：</p>
<ul>
<li>由于 IE8 是 ES3，需要引入 ES5 的 <code>polyfill</code>: <code>es5-shim</code>, <code>es5-sham</code>；</li>
<li>引入 Promise 的 <code>polyfill</code>: <code>es6-promise</code>；</li>
<li>引入 fetch 探测库：fetch-detector；</li>
<li>引入 fetch 的 polyfill: fetch-ie8；</li>
<li>可选：如果你还使用了 jsonp，引入 fetch-jsonp；</li>
</ul>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>fetch 支持 HTTP 方法，下面主要用例子讲解 POST 和 GET 的请求。<br><strong>HTML 请求：</strong><br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">fetch(<span class="string">'/users.html'</span>)</div><div class="line">  .<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">(response)</span></span> &#123;</div><div class="line">    <span class="keyword">return</span> response.text()</div><div class="line">  &#125;).<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">(body)</span></span> &#123;</div><div class="line">    document.body.innerHTML = body</div><div class="line">  &#125;)</div></pre></td></tr></table></figure></p>
<p><strong>JSON 请求：</strong><br><figure class="highlight scilab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">fetch(<span class="string">'/users.json'</span>)</div><div class="line">  .<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">(response)</span> &#123;</span></div><div class="line">    <span class="keyword">return</span> response.json()</div><div class="line">  &#125;).<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">(json)</span> &#123;</span></div><div class="line">    console.<span class="built_in">log</span>(<span class="string">'parsed json'</span>, json)</div><div class="line">  &#125;).<span class="keyword">catch</span>(<span class="function"><span class="keyword">function</span><span class="params">(ex)</span> &#123;</span></div><div class="line">    console.<span class="built_in">log</span>(<span class="string">'parsing failed'</span>, ex)</div><div class="line">  &#125;)</div></pre></td></tr></table></figure></p>
<p><strong>响应头设置：</strong><br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">fetch(<span class="string">'/users.json'</span>).<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span>(<span class="title">response</span>) &#123;</span></div><div class="line">  console.<span class="built_in">log</span>(response.headers.<span class="built_in">get</span>(<span class="string">'Content-Type'</span>))</div><div class="line">  console.<span class="built_in">log</span>(response.headers.<span class="built_in">get</span>(<span class="string">'Date'</span>))</div><div class="line">  console.<span class="built_in">log</span>(response.status)</div><div class="line">  console.<span class="built_in">log</span>(response.statusText)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p><strong>Post 表单提交：</strong><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">var</span> <span class="selector-tag">form</span> = document.querySelector(<span class="string">'form'</span>)</div><div class="line"></div><div class="line">fetch(<span class="string">'/users'</span>, &#123;</div><div class="line">  method: <span class="string">'POST'</span>,</div><div class="line">  <span class="selector-tag">body</span>: new FormData(form)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p><strong>Post JSON：</strong><br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">fetch</span>(<span class="string">'/users'</span>, &#123;</div><div class="line">  <span class="attribute">method</span>: <span class="string">'POST'</span>,</div><div class="line">  <span class="attribute">headers</span>: &#123;</div><div class="line">    <span class="string">'Accept'</span>: <span class="string">'application/json'</span>,</div><div class="line">    <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attribute">body</span>: JSON.stringify(&#123;</div><div class="line">    <span class="attribute">name</span>: <span class="string">'Hubot'</span>,</div><div class="line">    <span class="attribute">login</span>: <span class="string">'hubot'</span>,</div><div class="line">  &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p><strong>上传文件：</strong><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">var</span> <span class="selector-tag">input</span> = document.querySelector(<span class="string">'input[type="file"]'</span>)</div><div class="line"></div><div class="line"><span class="selector-tag">var</span> data = new FormData()</div><div class="line">data.append(<span class="string">'file'</span>, <span class="selector-tag">input</span><span class="selector-class">.files</span>[<span class="number">0</span>])</div><div class="line">data.append(<span class="string">'user'</span>, <span class="string">'hubot'</span>)</div><div class="line"></div><div class="line">fetch(<span class="string">'/avatars'</span>, &#123;</div><div class="line">  method: <span class="string">'POST'</span>,</div><div class="line">  <span class="selector-tag">body</span>: data</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h2 id="使用注意："><a href="#使用注意：" class="headerlink" title="使用注意："></a>使用注意：</h2><ul>
<li>Fetch 请求默认是不带 cookie 的，需要设置 <code>fetch(url, {credentials: &#39;include&#39;})</code></li>
<li>服务器返回 400，500 错误码时并不会 reject，只有网络错误这些导致请求不能完成时，fetch 才会被 reject。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;XMLHttpRequest 是一个设计粗糙的 API，不符合关注分离（Separation of Concerns）的原则，配置和调用方式非常混乱，而且基于事件的异步模型写起来也没有现代的 Promise，generator/yield，async/await 友好。&lt;br&gt;
    
    </summary>
    
      <category term="fetch" scheme="http://blog.lengziyu.com/categories/fetch/"/>
    
    
      <category term="fetch" scheme="http://blog.lengziyu.com/tags/fetch/"/>
    
  </entry>
  
  <entry>
    <title>React 操作真实 DOM</title>
    <link href="http://blog.lengziyu.com/2016/10/20/react-use-dmo-refs/"/>
    <id>http://blog.lengziyu.com/2016/10/20/react-use-dmo-refs/</id>
    <published>2016-10-20T12:18:07.000Z</published>
    <updated>2016-10-24T14:24:15.015Z</updated>
    
    <content type="html"><![CDATA[<p>React中的每一个组件都是一个状态机，通常情况下，我们通过设置组件的状态就可以完成UI的更新，但是在某些情况下确实需要直接操作DOM。<br><a id="more"></a><br>React 支持一种非常特殊的属性 Ref ，你可以用来绑定到 render() 输出的任何组件上。</p>
<ul>
<li>ref : 绑定属性</li>
<li>refs : 调用的时候使用</li>
</ul>
<h2 id="获取DOM实例"><a href="#获取DOM实例" class="headerlink" title="获取DOM实例"></a>获取DOM实例</h2><p>通过ref属性，你可获取实例中的属性方法，甚至可以通过他获取到DOM实例节点 <code>this.refs.xx.getDOMNode()</code></p>
<p><strong>ref 属性绑定</strong><br><figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"text"</span> <span class="keyword">ref</span>=<span class="string">"myInput"</span> /&gt;</div></pre></td></tr></table></figure></p>
<p><strong>refs 获取DOM实例</strong><br>获取支撑实例（ backing instance ）。这样就可以确保在任何时间总是拿到正确的实例。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 输入框获取焦点</span></div><div class="line">this<span class="selector-class">.refs</span><span class="selector-class">.myInput</span><span class="selector-class">.focus</span>()</div></pre></td></tr></table></figure></p>
<p><strong>示例</strong><br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="type">React</span>, &#123; <span class="type">Component</span> &#125; from <span class="symbol">'reac</span>t';</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  handleClick()&#123;</div><div class="line">    <span class="keyword">this</span>.refs.myInput.focus();</div><div class="line">  &#125;</div><div class="line">  render()&#123;</div><div class="line">    <span class="keyword">return</span>(</div><div class="line">      &lt;div&gt;</div><div class="line">        &lt;input</div><div class="line">          <span class="class"><span class="keyword">type</span></span>=<span class="string">"text"</span></div><div class="line">          ref=<span class="string">"myInput"</span></div><div class="line">        /&gt;</div><div class="line">        &lt;input</div><div class="line">          <span class="class"><span class="keyword">type</span></span>=<span class="string">"button"</span></div><div class="line">          value=<span class="string">"点我输入框获取焦点"</span></div><div class="line">          onClick=&#123;<span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>)&#125;</div><div class="line">        /&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="type">ReactDOM</span>.render(</div><div class="line">  &lt;<span class="type">MyComponent</span>/&gt;,</div><div class="line">  document.querySelector('#app')</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>获取<code>myInput</code>真实DOM的值：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myInput = <span class="keyword">this</span>.refs.myInput.props.<span class="keyword">value</span>;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;React中的每一个组件都是一个状态机，通常情况下，我们通过设置组件的状态就可以完成UI的更新，但是在某些情况下确实需要直接操作DOM。&lt;br&gt;
    
    </summary>
    
      <category term="react" scheme="http://blog.lengziyu.com/categories/react/"/>
    
    
      <category term="react" scheme="http://blog.lengziyu.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>React 笔记之 表单</title>
    <link href="http://blog.lengziyu.com/2016/10/18/react-to-biaodan/"/>
    <id>http://blog.lengziyu.com/2016/10/18/react-to-biaodan/</id>
    <published>2016-10-18T13:48:08.000Z</published>
    <updated>2016-10-18T14:06:59.442Z</updated>
    
    <content type="html"><![CDATA[<p>诸如： <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code>、<code>&lt;option&gt;</code> 这样的表单组件不同于其他组件，因为他们可以通过用户交互发生变化。这些组件提供的界面使响应用户交互的表单数据处理更加容易。<br><a id="more"></a></p>
<h2 id="交互属性"><a href="#交互属性" class="headerlink" title="交互属性"></a>交互属性</h2><p>在 HTML 中<code>&lt;textarea&gt;</code>的值通过子节点设置；在 React 中则应该使用 value 代替。<br>表单组件可以通过onChange回调函数来监听组件变化。当用户做出以下交互时,onChange执行并通过浏览器做出响应：</p>
<ul>
<li><code>&lt;input&gt;</code>或 <code>&lt;textarea&gt;</code> 的 <code>value</code> 发生变化时。</li>
<li><code>&lt;input&gt;</code>的 <code>checked</code> 状态改变时。</li>
<li><code>&lt;option&gt;</code> 的 <code>selected</code> 状态改变时。<br>和所有 DOM 事件一样，所有的 HTML 原生组件都支持 onChange 属性，而且可以用来监听冒泡的 change 事件.</li>
</ul>
<div class="tip"><br>对于<code>&lt;input&gt;</code>和<code>&lt;textarea&gt;</code>，onChange应当被用于取代DOM内置的onInput事件处理<br></div>

<h2 id="不可控组件和可控组件"><a href="#不可控组件和可控组件" class="headerlink" title="不可控组件和可控组件"></a>不可控组件和可控组件</h2><p><strong>可控组件</strong><br>设置了 <code>value</code> 的 <code>&lt;input&gt;</code> 是一个受限组件。 对于受限的 <code>&lt;input&gt;</code>，渲染出来的 HTML 元素始终保持 <code>value</code> 属性的值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"Hello!"</span>/&gt;</span>;</span></div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>上面的代码将渲染出一个值为 Hello! 的 input 元素。用户在渲染出来的元素里输入任何值都不起作用，因为 React 已经赋值为 Hello!。如果想响应更新用户输入的值，就得使用 onChange 事件<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">getInitialState: <span class="function"><span class="keyword">function</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">return</span> &#123;<span class="keyword">value</span>: <span class="string">'Hello!'</span>&#125;;</div><div class="line"> &#125;,</div><div class="line"> handleChange: <span class="function"><span class="keyword">function</span><span class="params">(event)</span></span> &#123;</div><div class="line">    this.setState(&#123;<span class="keyword">value</span>: event.<span class="keyword">target</span>.<span class="keyword">value</span>&#125;);</div><div class="line"> &#125;,</div><div class="line"> render: <span class="function"><span class="keyword">function</span><span class="params">()</span></span> &#123;</div><div class="line">    var <span class="keyword">value</span> = this.state.<span class="keyword">value</span>;</div><div class="line">    <span class="keyword">return</span> &lt;input <span class="keyword">type</span>=<span class="string">"text"</span> <span class="keyword">value</span>=&#123;<span class="keyword">value</span>&#125; onChange=&#123;this.handleChange&#125; /&gt;;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p><strong>Default Value</strong><br>初始值是状态中的value。如果要取数据，可直接使用 <code>var inputValue = this.state.value</code>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">   <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">defaultValue</span>=<span class="string">&#123;this.state.value&#125;/</span>&gt;</span>;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><div class="tip"><br>一个可控组件并不保持自己的原始状态；组件的呈现完全基于属性。<br></div><br><strong>实例</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Kekong = React.creatClass(&#123;</div><div class="line">    <span class="attr">getInitialState</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            <span class="attr">dada</span>:<span class="string">'shuaige'</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">handleChange</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.setState(&#123;</div><div class="line">            <span class="attr">dada</span>:e.target.value</div><div class="line">        &#125;);</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">submitHandler</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">        e.preventDefault();</div><div class="line">        alert(<span class="keyword">this</span>.state.dada);</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">render</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.submitHandler&#125;</span>&gt;</span></span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">&#123;this.state.dada&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>speak<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span>;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">ReactDOM.render(<span class="tag">&lt;<span class="name">Kekong</span> /&gt;</span>,document.body);</div></pre></td></tr></table></figure></p>
<p><strong>不可控组件</strong><br>没有设置value(或者设为null) 的<code>&lt;input&gt;</code>组件是一个不可控组件。这样的话，组件中的数据和state中的数据并不对应，可以说，组件的数据不可控。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> /&gt;</span>;</span></div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>上面的代码将渲染出一个空值的输入框，用户输入将立即反应到元素上。和受限元素一样，使用 onChange 事件可以监听值的变化。<br><strong>Default Value</strong><br>如果想给组件设置一个非空的初始值，可以使用 defaultValue 属性。 数据在这里并没有存贮在状态中，而是写在input中。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">   <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">defaultValue</span>=<span class="string">"Hello!"</span> /&gt;</span>;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果要拿到input中的value，需先拿到其DOM节点，然后获取其value值<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">var</span> inputValue = React.findDOMNode(this<span class="selector-class">.refs</span><span class="selector-class">.input</span>).value</div></pre></td></tr></table></figure></p>
<p>上面的代码渲染出来的元素和受限组件一样有一个初始值，但这个值用户可以改变并会反应到界面上。<br>同样，<code>&lt;input type=&quot;checkbox&quot;&gt;</code>和<code>&lt;input type=&quot;radio&quot;&gt;</code>支持defaultChecked属性，<code>&lt;select&gt;</code>支持设置defaultValue。<br><code>defaultValue</code>和<code>defaultChecked</code>属性只能在初始的render函数中使用，如果你要在随后的render函数中更新value值，你需要使用可控组件。</p>
<p><strong>实例</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> UnKekong = React.creatClass(&#123;</div><div class="line">    <span class="attr">submitHandler</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">        e.preventDefault();</div><div class="line">        <span class="keyword">var</span> helloUnke = React.findDOMNode(<span class="keyword">this</span>.refs.helloUnke).value;</div><div class="line">        alert(helloUnke);</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">render</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onsubmit</span>=<span class="string">&#123;this.submitHandler&#125;</span>&gt;</span></span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">"helloUnke"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">defaultValue</span>=<span class="string">"Dada shuaige"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>speak<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span>;</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line">React.render(<span class="tag">&lt;<span class="name">Unkekong</span> /&gt;</span>,document.body);</div></pre></td></tr></table></figure></p>
<p><strong>Checkbox和Radio的潜在问题</strong></p>
<p><div class="tip"><br>注意，在试图改变正常处理Checkbox和Radio input时，React用一个click事件来代替change事件。大多数情况下，这种行为与预期相同，除了调用preventDefault时。preventDefault从视觉上阻止浏览器更新input，即使checked被触发。它可以在移除调用preventDefault与用setTimeout来切换checked中起作用。<br></div><br><strong>Why use Controlled Components</strong><br>组件可控的优点：</p>
<ul>
<li>符合React的数据流，单向数据流，从state流向render输出的结果。</li>
<li>数据存贮在state中，便于使用。</li>
<li>便于对数据进行处理</li>
</ul>
<h2 id="表单元素"><a href="#表单元素" class="headerlink" title="表单元素"></a>表单元素</h2><ul>
<li><code>&lt;label htmlFor=&quot;name&quot;&gt;Name&lt;/label&gt;</code></li>
<li>要注意for是js关键字，要写成htmlFor。具体JSX语法在之间笔记中有介绍，传送门：React.js学习笔记之JSX解读。现在多数提示用input的placeholder属性替代。</li>
<li><code>&lt;input type=&quot;&quot; onChange={this.handleChange}/&gt;</code></li>
<li><code>&lt;textarea onChange={this.handleChange}/&gt;</code></li>
<li><code>&lt;select onChange={this.handleChange}&gt;&lt;option&gt;&lt;/option&gt;&lt;/select&gt;</code></li>
</ul>
<p><strong>实例</strong><br><a href="https://github.com/Xiaoxianrou/Blog/tree/master/2016.03/React-Demo/demo3" target="_blank" rel="external">这是一个demo传送门</a><br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> MyForm = React.createClass(&#123;</div><div class="line">getInitialState:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        username:<span class="string">''</span>,</div><div class="line">        gender:<span class="string">'man'</span>,</div><div class="line">        checked:<span class="literal">true</span></div><div class="line">    &#125;;</div><div class="line">&#125;,</div><div class="line">handleUsernameChange:<span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>&#123;</div><div class="line">    <span class="keyword">this</span>.setState(&#123;</div><div class="line">        username:e.target.value</div><div class="line">    &#125;);</div><div class="line">&#125;,</div><div class="line">handlerGenderChange:<span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>&#123;</div><div class="line">    <span class="keyword">this</span>.setState(&#123;</div><div class="line">        gender:e.target.value</div><div class="line">    &#125;);</div><div class="line">&#125;,</div><div class="line">handleCheckedChange:<span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>&#123;</div><div class="line">    <span class="keyword">this</span>.setState(&#123;</div><div class="line">        checked:e.target.checked</div><div class="line">    &#125;);</div><div class="line">&#125;,</div><div class="line">submitHandler:<span class="function"><span class="keyword">function</span> <span class="params">(e)</span> </span>&#123;</div><div class="line">    e.preventDefault();</div><div class="line">    console.log(<span class="keyword">this</span>.state);</div><div class="line">&#125;,</div><div class="line">render:<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> &lt;form onSubmit=&#123;<span class="keyword">this</span>.submitHandler&#125;&gt;</div><div class="line">        &lt;label htmlFor=<span class="string">"username"</span>&gt;请输入用户名&lt;/label&gt;</div><div class="line">        &lt;input type=<span class="string">"text"</span> onChange=&#123;<span class="keyword">this</span>.handleUsernameChange&#125; value=&#123;<span class="keyword">this</span>.state.username&#125; id=<span class="string">"username"</span>/&gt;</div><div class="line">        &lt;br/&gt;</div><div class="line">        &lt;select onChange=&#123;<span class="keyword">this</span>.handlerGenderChange&#125; value=&#123;<span class="keyword">this</span>.state.gender&#125;&gt;</div><div class="line">            &lt;option value=<span class="string">"man"</span>&gt;男&lt;/option&gt;</div><div class="line">            &lt;option value=<span class="string">"woman"</span>&gt;女&lt;/option&gt;</div><div class="line">        &lt;/select&gt;</div><div class="line">        &lt;br/&gt;</div><div class="line">        &lt;label htmlFor=<span class="string">"checkbox"</span>&gt;大大是帅哥吗&lt;/label&gt;</div><div class="line">        &lt;input type=<span class="string">"checkbox"</span> value=<span class="string">"大大是帅哥"</span> checked=&#123;<span class="keyword">this</span>.state.checked&#125; onChange=&#123;<span class="keyword">this</span>.handleCheckedChange&#125; id=<span class="string">"checkbox"</span>/&gt;</div><div class="line">        &lt;button type=<span class="string">"submit"</span>&gt;提交&lt;/button&gt;</div><div class="line">    &lt;/form&gt;</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line">ReactDOM.render(&lt;MyForm /&gt;,document.getElementById(<span class="string">'reactDemo'</span>));</div></pre></td></tr></table></figure></p>
<h2 id="事件处理函数"><a href="#事件处理函数" class="headerlink" title="事件处理函数"></a>事件处理函数</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">onChange</span>=&#123;this.handleChange&#125;</div></pre></td></tr></table></figure>
<p>若有多个元素要运用事件处理函数，常规的方法是编写多个onChange事件。这么写的话会导致代码维护比较困难并且也非常冗余。更好的做法是把事件处理函数编写为一个。可以采用bind复用和name复用这两种方法。</p>
<p><strong>bind复用</strong><br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">handleChange:<span class="function"><span class="keyword">function</span><span class="params">(name,event)</span></span>&#123;</div><div class="line">    ......</div><div class="line">&#125;</div><div class="line">onChagne=&#123;<span class="keyword">this</span>.handleChange.bind(<span class="keyword">this</span>,<span class="string">'input'</span>)&#125;</div></pre></td></tr></table></figure></p>
<p>书写简单，但需要对bind()机制熟悉，性能相对要好。</p>
<p><strong>实例</strong><br><a href="https://github.com/Xiaoxianrou/Blog/tree/master/2016.03/React-Demo/demo3" target="_blank" rel="external">这是一个demo传送门</a><br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> MyForm = React.createClass(&#123;</div><div class="line">    getInitialState:function()&#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            username:<span class="string">''</span>,</div><div class="line">            gender:<span class="string">'man'</span>,</div><div class="line">            <span class="keyword">checked</span>:<span class="literal">true</span></div><div class="line">        &#125;;</div><div class="line">    &#125;,</div><div class="line">    handleChange:function(name,<span class="keyword">event</span>)&#123;</div><div class="line">        <span class="keyword">var</span> newState=&#123;&#125;;</div><div class="line">        newState[name]=name==<span class="string">"checked"</span>?<span class="keyword">event</span>.target.<span class="keyword">checked</span>:<span class="keyword">event</span>.target.<span class="keyword">value</span>;</div><div class="line">        <span class="keyword">this</span>.setState(newState);</div><div class="line">    &#125;,</div><div class="line">    submitHandler:function (e) &#123;</div><div class="line">        e.preventDefault();</div><div class="line">        console.log(<span class="keyword">this</span>.state);</div><div class="line">    &#125;,</div><div class="line">    render:function () &#123;</div><div class="line">        <span class="keyword">return</span> &lt;form onSubmit=&#123;<span class="keyword">this</span>.submitHandler&#125;&gt;</div><div class="line">            &lt;label htmlFor=<span class="string">"username"</span>&gt;请输入用户名&lt;/label&gt;</div><div class="line">            &lt;input type=<span class="string">"text"</span> onChange=&#123;<span class="keyword">this</span>.handleChange.bind(<span class="keyword">this</span>,<span class="string">"username"</span>)&#125; <span class="keyword">value</span>=&#123;<span class="keyword">this</span>.state.username&#125; id=<span class="string">"username"</span>/&gt;</div><div class="line">            &lt;br/&gt;</div><div class="line">            &lt;<span class="keyword">select</span> onChange=&#123;<span class="keyword">this</span>.handleChange.bind(<span class="keyword">this</span>,<span class="string">"gender"</span>)&#125; <span class="keyword">value</span>=&#123;<span class="keyword">this</span>.state.gender&#125;&gt;</div><div class="line">                &lt;option <span class="keyword">value</span>=<span class="string">"man"</span>&gt;男&lt;/option&gt;</div><div class="line">                &lt;option <span class="keyword">value</span>=<span class="string">"woman"</span>&gt;女&lt;/option&gt;</div><div class="line">            &lt;/<span class="keyword">select</span>&gt;</div><div class="line">            &lt;br/&gt;</div><div class="line">            &lt;label htmlFor=<span class="string">"checkbox"</span>&gt;大大是帅哥吗&lt;/label&gt;</div><div class="line">            &lt;input type=<span class="string">"checkbox"</span> <span class="keyword">value</span>=<span class="string">"大大是帅哥"</span> <span class="keyword">checked</span>=&#123;<span class="keyword">this</span>.state.<span class="keyword">checked</span>&#125; onChange=&#123;<span class="keyword">this</span>.handleChange.bind(<span class="keyword">this</span>,<span class="string">"checked"</span>)&#125; id=<span class="string">"checkbox"</span>/&gt;</div><div class="line">            &lt;button type=<span class="string">"submit"</span>&gt;提交&lt;/button&gt;</div><div class="line">        &lt;/form&gt;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">ReactDOM.render(&lt;MyForm /&gt;,document.getElementById(<span class="string">'reactDemo'</span>));</div></pre></td></tr></table></figure></p>
<p><strong>name复用</strong><br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">handleChange:<span class="function"><span class="keyword">function</span><span class="params">(event)</span></span>&#123;</div><div class="line">    var <span class="keyword">name</span> = event.<span class="keyword">target</span>.<span class="keyword">name</span></div><div class="line">&#125;</div><div class="line">onChange=&#123;this.handleChange&#125;</div></pre></td></tr></table></figure></p>
<p>相比Bind写法会少一些参数，在函数中需要读取表单的name值，需要添加name属性。</p>
<p><strong>实例</strong><br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> MyForm = React.createClass(&#123;</div><div class="line">    getInitialState:function()&#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            username:<span class="string">''</span>,</div><div class="line">            gender:<span class="string">'man'</span>,</div><div class="line">            <span class="keyword">checked</span>:<span class="literal">true</span></div><div class="line">        &#125;;</div><div class="line">    &#125;,</div><div class="line">    handleChange:function(<span class="keyword">event</span>)&#123;</div><div class="line">        <span class="keyword">var</span> newState=&#123;&#125;;</div><div class="line">        newState[<span class="keyword">event</span>.target.name]=<span class="keyword">event</span>.target.name==<span class="string">"checked"</span>?<span class="keyword">event</span>.target.<span class="keyword">checked</span>:<span class="keyword">event</span>.target.<span class="keyword">value</span>;</div><div class="line">        <span class="keyword">this</span>.setState(newState);</div><div class="line">    &#125;,</div><div class="line">    submitHandler:function (e) &#123;</div><div class="line">        e.preventDefault();</div><div class="line">        console.log(<span class="keyword">this</span>.state);</div><div class="line">    &#125;,</div><div class="line">    render:function () &#123;</div><div class="line">        <span class="keyword">return</span> &lt;form onSubmit=&#123;<span class="keyword">this</span>.submitHandler&#125;&gt;</div><div class="line">            &lt;label htmlFor=<span class="string">"username"</span>&gt;请输入用户名&lt;/label&gt;</div><div class="line">            &lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span> onChange=&#123;<span class="keyword">this</span>.handleChange&#125; <span class="keyword">value</span>=&#123;<span class="keyword">this</span>.state.username&#125; id=<span class="string">"username"</span>/&gt;</div><div class="line">            &lt;br/&gt;</div><div class="line">            &lt;<span class="keyword">select</span> name=<span class="string">"gender"</span> onChange=&#123;<span class="keyword">this</span>.handleChange&#125; <span class="keyword">value</span>=&#123;<span class="keyword">this</span>.state.gender&#125;&gt;</div><div class="line">                &lt;option <span class="keyword">value</span>=<span class="string">"man"</span>&gt;男&lt;/option&gt;</div><div class="line">                &lt;option <span class="keyword">value</span>=<span class="string">"woman"</span>&gt;女&lt;/option&gt;</div><div class="line">            &lt;/<span class="keyword">select</span>&gt;</div><div class="line">            &lt;br/&gt;</div><div class="line">            &lt;label htmlFor=<span class="string">"checkbox"</span>&gt;大大是帅哥吗&lt;/label&gt;</div><div class="line">            &lt;input type=<span class="string">"checkbox"</span> <span class="keyword">value</span>=<span class="string">"大大是帅哥"</span> <span class="keyword">checked</span>=&#123;<span class="keyword">this</span>.state.<span class="keyword">checked</span>&#125; onChange=&#123;<span class="keyword">this</span>.handleChange&#125; name=<span class="string">"checked"</span> id=<span class="string">"checkbox"</span>/&gt;</div><div class="line">            &lt;button type=<span class="string">"submit"</span>&gt;提交&lt;/button&gt;</div><div class="line">        &lt;/form&gt;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">ReactDOM.render(&lt;MyForm /&gt;,document.getElementById(<span class="string">'reactDemo'</span>));</div></pre></td></tr></table></figure></p>
<h2 id="自定义表单组件"><a href="#自定义表单组件" class="headerlink" title="自定义表单组件"></a>自定义表单组件</h2><p>自定义表单组件能让我们更好的使用组件，让我们更好的开发网页。</p>
<p><strong>why 自定义表单组件？</strong><br>自定义表单组件的原因：</p>
<ul>
<li>内因：表单本身具备特殊性：样式统一、信息内聚、行为固定</li>
<li>外因：本质上是组件的嵌套，组织和管理组件的一种方式</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;诸如： &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; 这样的表单组件不同于其他组件，因为他们可以通过用户交互发生变化。这些组件提供的界面使响应用户交互的表单数据处理更加容易。&lt;br&gt;
    
    </summary>
    
      <category term="react" scheme="http://blog.lengziyu.com/categories/react/"/>
    
    
      <category term="react" scheme="http://blog.lengziyu.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>ES6笔记之 let 和 const</title>
    <link href="http://blog.lengziyu.com/2016/10/17/ES6-to-let-and-const/"/>
    <id>http://blog.lengziyu.com/2016/10/17/ES6-to-let-and-const/</id>
    <published>2016-10-17T13:51:50.000Z</published>
    <updated>2016-10-29T14:59:23.565Z</updated>
    
    <content type="html"><![CDATA[<p>ES6新增了 let 和 const 命令，用来声明变量。它的用法类似于var，却有所区别。<br><a id="more"></a></p>
<h2 id="let"><a href="#let" class="headerlink" title="let"></a>let</h2><p>let声明的变量只在其所在的代码块内有效。</p>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="keyword">let</span> a = <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line">console.<span class="built_in">log</span>(a)   <span class="comment">//ReferenceError:a is not defined</span></div></pre></td></tr></table></figure>
<p><strong>let声明变量不存在变量提升</strong><br>let不像var那样会发生“变量提升”现象，所以，变量一定要在声明后使用，不然就会报错。</p>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">console.<span class="built_in">log</span>(a)   <span class="comment">//ReferenceError:a is not defined</span></div><div class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</div></pre></td></tr></table></figure>
<p><strong>暂时性死区</strong><br>只要块级作用域内存在let关键字，它所声明的变量就绑定这个区域，不再受外部影响。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> tmp = <span class="number">20</span>;</div><div class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</div><div class="line">    tmp = <span class="string">'abc'</span>;    <span class="comment">//ReferenceError:tmp is not defined</span></div><div class="line">    <span class="keyword">let</span> tmp;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的代码中存在全局变量tmp，但是块级作用域内let又声明了一个局部变量tmp，导致后者绑定了这个块级作用域，所以在let声明变量前，对tmp赋值会报错。</p>
<div class="tip">ES6明确规定，如果区块中存在let和const命令，则这个区块对这些命令声明的变量从一开始就形成封闭作用域。只要在声明之前使用这些变量，就会报错。在语法上称为“暂时性死区(temporal dead zone,TDZ)”</div>有时候，会不经间遇到比较隐蔽的“死区”，不太容易被发现。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span><span class="params">(x=y,y=2)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> [x,y];</div><div class="line">&#125;</div><div class="line">bar() <span class="comment">//报错</span></div></pre></td></tr></table></figure><br><br>上面的代码中是因为参数x的默认值等于另一个参数y，而此时y还没有声明，属于死区。<br><br><strong>不允许重复声明</strong><br>let不允许在相同的作用域内声明同一个变量。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">let</span> a = <span class="number">10</span>;</div><div class="line">    <span class="keyword">var</span> a = <span class="number">20</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//报错</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bat</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">let</span> a = <span class="number">10</span>;</div><div class="line">    <span class="keyword">let</span> a = <span class="number">20</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//报错</span></div></pre></td></tr></table></figure><br><br>因此，所以也不能在函数内重复声明参数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">args</span>)</span>&#123;</div><div class="line">    <span class="keyword">let</span> args = <span class="number">10</span>;  </div><div class="line">&#125;</div><div class="line">bar() <span class="comment">//报错</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">args</span>)</span>&#123;</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">let</span> args = <span class="number">20</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">bar()  <span class="comment">//不报错</span></div></pre></td></tr></table></figure><br><br><strong>块级作用域</strong><br><br>使用let和const可以实现块级作用域：<br><br>1. 外层代码块不受内层代码块的影响。<br>2. 外层作用域无法读取内层作用域的变量。<br>3. 内层作用域可以定义外层作用域的同名变量。<br><br>块级作用域的实现，使得广泛使用的自执行匿名函数(IIFE)变得不再必要了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//自执行模式</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> a = <span class="number">10</span>;</div><div class="line">&#125;)()</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//块级作用域写法</span></div><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">let</span> a = <span class="number">10</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br><br><div class="tip">函数本身的作用域也在其所在的块级作用域之内。</div>

<h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><p>const用来声明常量。一旦声明，其值就不能再改变。<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const <span class="literal">PI</span> = <span class="number">3.1415</span>;</div><div class="line">const <span class="literal">PI</span> = <span class="number">3</span>  <span class="comment">//TypeErrorL "PI" is read-only</span></div></pre></td></tr></table></figure></p>
<div class="tip">const声明的变量不得改变值，意味着 const 一旦声明常量就必须立即初始化，不能留到后面赋值。</div><br>const与let关键字一样，只在声明所在的块级作用域内有效；const关键字声明的常量也不提升，同样存在暂时性死区，只能在声明后使用。<br><div class="tip">对于复合型数据类型，常量名不指向数据，而是指向数据所在的地址。const关键字只是保证常量名指向的地址不变，并不保证该地址的数据不变，所以将一个对象声明为常量必须注意该点。</div>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ES6新增了 let 和 const 命令，用来声明变量。它的用法类似于var，却有所区别。&lt;br&gt;
    
    </summary>
    
      <category term="es6" scheme="http://blog.lengziyu.com/categories/es6/"/>
    
    
      <category term="es6" scheme="http://blog.lengziyu.com/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>Yarn - Javascript 新一代套件管理</title>
    <link href="http://blog.lengziyu.com/2016/10/14/yarn-a-new-javascript-pkg/"/>
    <id>http://blog.lengziyu.com/2016/10/14/yarn-a-new-javascript-pkg/</id>
    <published>2016-10-14T15:25:51.000Z</published>
    <updated>2016-10-14T16:04:01.248Z</updated>
    
    <content type="html"><![CDATA[<p>日前，Facebook 发布了全新的 JS 套件管理工具 <a href="https://github.com/yarnpkg/yarn" target="_blank" rel="external">Yarn</a>，这是一个新的快速安全可信赖的可以替代NPM的依赖管理工具。<br>在取代npm客户端和其他包管理器现有工作流的同时，又保留了对npm代理的兼容性。它拥有与现有的工作流相同的特性，只是操作起来更快、更安全、更可靠。<br><a id="more"></a></p>
<h2 id="Yarn-提供一个更快更稳定的套件管理方案"><a href="#Yarn-提供一个更快更稳定的套件管理方案" class="headerlink" title="Yarn 提供一个更快更稳定的套件管理方案"></a>Yarn 提供一个更快更稳定的套件管理方案</h2><ol>
<li>透过 yarn.lock ，锁住套件版本，因此可以确保安装之套件在每台机器上都能保持一致。</li>
<li>安装过的套件，都会加入到 global cache 中，下次有砍掉要重装，或是不同资料夹要装，都可以在无网络情況底下安裝。</li>
<li>非常快，平行化处理每个 operation，全新的 resolving 演算法。</li>
</ol>
<h2 id="特性功能"><a href="#特性功能" class="headerlink" title="特性功能"></a>特性功能</h2><p>除了让安装过程更快更可靠，Yarn 还有额外的特性来更好地简化依赖管理的工作流。</p>
<ul>
<li>兼容 npm 和 bower 工作流，并且支持混合注册。</li>
<li>能够限制已安装模块的证书以及输出证书信息。</li>
<li>暴露一个稳定公开的JS API，通过构建工具提供抽象的日志记录。</li>
<li>可读、最小化、良好的命令行输出。</li>
</ul>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">// 以前装过 npm 再安装 yarn</div><div class="line">npm install -g yarn</div><div class="line"><span class="comment"></span></div><div class="line">// 直接安装 (mac为例，其余官网有介绍)</div><div class="line">curl -o- -L <span class="keyword">https</span>://yarnpkg.com/install.sh | bash</div><div class="line"><span class="comment"></span></div><div class="line">// 一般安装 (等同 npm install)</div><div class="line">yarn</div><div class="line"><span class="comment"></span></div><div class="line">// 安装特定套件 (等同 npm install --save)</div><div class="line">yarn <span class="built_in">add</span> react         </div><div class="line">yarn <span class="built_in">add</span> react@<span class="number">15.3</span><span class="number">.2</span></div><div class="line"><span class="comment"></span></div><div class="line">// 更新特定套件 (等同 npm upgrade)</div><div class="line">yarn upgrade react</div><div class="line"><span class="comment"></span></div><div class="line">// 移除特定套件 (等同 npm uninstall)</div><div class="line">yarn remove react</div><div class="line"><span class="comment"></span></div><div class="line">// 新增 package.json</div><div class="line">yarn init</div><div class="line"><span class="comment"></span></div><div class="line">// 新增全域套件</div><div class="line">yarn <span class="built_in">global</span> <span class="built_in">add</span></div><div class="line"><span class="comment"></span></div><div class="line">// 跑 script</div><div class="line">yarn run</div><div class="line"><span class="comment"></span></div><div class="line">// 其他常用选项</div><div class="line"><span class="comment">--offline   (离线模式，只拉 cache)</span></div><div class="line"><span class="comment">--flat      (将套件扁平化，一個资料夹只会有一個套件)</span></div><div class="line"><span class="comment">--dev       (加入到 devDependencies)</span></div><div class="line"><span class="comment">--peer      (加入到 peerDependencies)</span></div><div class="line"><span class="comment">--optional  (加入到 optionalDependencies)</span></div></pre></td></tr></table></figure>
<h2 id="Cheat"><a href="#Cheat" class="headerlink" title="Cheat"></a>Cheat</h2><table><thead><tr><th>NPM</th><th>YARN</th><th>说明</th></tr></thead><tbody><tr><td>npm init</td><td>yarn init</td><td>初始化某个项目</td></tr><tr><td>npm install/link</td><td>yarn install/link</td><td>默认的安装依赖操作</td></tr><tr><td>npm install taco —save</td><td>yarn add taco</td><td>安装某个依赖，并且默认保存到package.</td></tr><tr><td>npm uninstall taco —save</td><td>yarn remove taco</td><td>移除某个依赖项目</td></tr><tr><td>npm install taco —save-dev</td><td>yarn add taco —dev</td><td>安装某个开发时依赖项目</td></tr><tr><td>npm update taco —save</td><td>yarn upgrade taco</td><td>更新某个依赖项目</td></tr><tr><td>npm install taco –global</td><td>yarn global add taco</td><td>安装某个全局依赖项目</td></tr><tr><td>npm publish/login/logout</td><td>yarn publish/login/logout</td><td>发布/登录/登出，一系列NPM Registry操作</td></tr><tr><td>npm run/test</td><td>yarn run/test</td><td>运行某个命令</td></tr></tbody></table>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://code.facebook.com/posts/1840075619545360/yarn-a-new-package-manager-for-javascript/" target="_blank" rel="external">Yarn: A new package manager for JavaScript</a></li>
<li><a href="https://blog.getexponent.com/yarn-a-new-program-for-installing-javascript-dependencies-44961956e728#.qf8fmeg4g" target="_blank" rel="external">Yarn: a new program for installing JavaScript dependencies</a></li>
<li><a href="https://shift.infinite.red/npm-vs-yarn-cheat-sheet-8755b092e5cc#.dcd5qeolm" target="_blank" rel="external">npm-vs-yarn-cheat-sheet</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;日前，Facebook 发布了全新的 JS 套件管理工具 &lt;a href=&quot;https://github.com/yarnpkg/yarn&quot;&gt;Yarn&lt;/a&gt;，这是一个新的快速安全可信赖的可以替代NPM的依赖管理工具。&lt;br&gt;在取代npm客户端和其他包管理器现有工作流的同时，又保留了对npm代理的兼容性。它拥有与现有的工作流相同的特性，只是操作起来更快、更安全、更可靠。&lt;br&gt;
    
    </summary>
    
      <category term="yarn" scheme="http://blog.lengziyu.com/categories/yarn/"/>
    
    
      <category term="yarn" scheme="http://blog.lengziyu.com/tags/yarn/"/>
    
  </entry>
  
  <entry>
    <title>Redux 简明教程（转）</title>
    <link href="http://blog.lengziyu.com/2016/10/13/Redux-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://blog.lengziyu.com/2016/10/13/Redux-学习笔记/</id>
    <published>2016-10-13T12:26:49.000Z</published>
    <updated>2016-10-13T12:43:41.608Z</updated>
    
    <content type="html"><![CDATA[<p>Redux 是 JavaScript 状态容器，提供可预测化的状态管理。</p>
<p>可以让你构建一致化的应用，运行于不同的环境（客户端、服务器、原生应用），并且易于测试。不仅于此，它还提供 超爽的开发体验，比如有一个<a href="https://github.com/gaearon/redux-devtools" target="_blank" rel="external">时间旅行调试器可以编辑后实时预览</a>。<br><a id="more"></a></p>
<p>Redux 除了和 React 一起用外，还支持其它界面库。<br>它体小精悍（只有2kB）且没有任何依赖。</p>
<h2 id="启示"><a href="#启示" class="headerlink" title="启示"></a>启示</h2><p>Redux 由 Flux 演变而来，但受 Elm 的启发，避开了 Flux 的复杂性。</p>
<h2 id="Store"><a href="#Store" class="headerlink" title="Store"></a>Store</h2><p>首先要区分 <code>store</code> 和 <code>state</code><br><code>state</code> 是应用的状态，一般本质上是一个普通对象<br>例如，我们有一个 Web APP，包含 计数器 和 待办事项 两大功能<br>那么我们可以为该应用设计出对应的存储数据结构（应用初始状态）：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** 应用初始 state，本代码块记为 code-1 **/</span></div><div class="line">&#123;</div><div class="line">  <span class="attribute">counter</span>: <span class="number">0</span>,</div><div class="line">  todos: []</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>store</code> 是应用状态 <code>state</code> 的管理者，包含下列四个函数：</p>
<ul>
<li>getState() # 获取整个 state</li>
<li>dispatch(action) # ※ 触发 state 改变的【唯一途径】※</li>
<li>subscribe(listener) # 您可以理解成是 DOM 中的 addEventListener</li>
<li>replaceReducer(nextReducer) # 一般在 Webpack Code-Splitting 按需加载的时候用</li>
</ul>
<p>二者的关系是：<code>state = store.getState()</code><br>Redux 规定，一个应用只应有一个单一的 <code>store</code>，其管理着唯一的应用状态 <code>state</code><br>Redux 还规定，不能直接修改应用的状态 <code>state</code>，也就是说，下面的行为是不允许的：</p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var <span class="keyword">state</span> = store.getState()</div><div class="line"><span class="keyword">state</span>.counter = <span class="keyword">state</span>.counter + <span class="number">1</span> // 禁止在业务逻辑中直接修改 <span class="keyword">state</span></div></pre></td></tr></table></figure>
<p>若要改变 <code>state</code>，必须 <code>dispatch</code> 一个 <code>action</code>，这是修改应用状态的不二法门</p>
<div class="tip"><br>现在您只需要记住 action 只是一个包含 type 属性的普通对象即可<br>例如 { type: ‘INCREMENT’ }<br></div><br>上面提到，<code>state</code> 是通过 <code>store.getState()</code> 获取，那么 <code>store</code> 又是怎么来的呢？<br>想生成一个 <code>store</code>，我们需要调用 Redux 的 <code>createStore</code>：<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; createStore &#125; from <span class="string">'redux'</span></div><div class="line">...</div><div class="line"><span class="keyword">const</span> store = createStore(reducer, initialState) <span class="comment">// store 是靠传入 reducer 生成的哦！</span></div></pre></td></tr></table></figure><br><br><div class="tip"><br>现在您只需要记住 reducer 是一个 函数，负责更新并返回一个新的 state<br>而 initialState 主要用于前后端同构的数据同步（详情请关注 React 服务端渲染）<br></div>

<h2 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h2><p>上面提到，<code>action</code>（动作）实质上是包含 <code>type</code> 属性的普通对象，这个 <code>type</code> 是我们实现用户行为追踪的关键<br>例如，增加一个待办事项 的 <code>action</code> 可能是像下面一样：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** 本代码块记为 code-2 **/</span></div><div class="line">&#123;</div><div class="line">  <span class="attribute">type</span>: <span class="string">'ADD_TODO'</span>,</div><div class="line">  <span class="attribute">payload</span>: &#123;</div><div class="line">    <span class="attribute">id</span>: <span class="number">1</span>,</div><div class="line">    <span class="attribute">content</span>: <span class="string">'待办事项1'</span>,</div><div class="line">    <span class="attribute">completed</span>: false</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当然，action 的形式是多种多样的，唯一的约束仅仅就是包含一个 type 属性罢了<br>也就是说，下面这些 action 都是合法的：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** 如下都是合法的，但就是不够规范 **/</span></div><div class="line">&#123;</div><div class="line">  <span class="attribute">type</span>: <span class="string">'ADD_TODO'</span>,</div><div class="line">  <span class="attribute">id</span>: <span class="number">1</span>,</div><div class="line">  <span class="attribute">content</span>: <span class="string">'待办事项1'</span>,</div><div class="line">  <span class="attribute">completed</span>: false</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="attribute">type</span>: <span class="string">'ADD_TODO'</span>,</div><div class="line">  <span class="attribute">abcdefg</span>: &#123;</div><div class="line">    <span class="attribute">id</span>: <span class="number">1</span>,</div><div class="line">    <span class="attribute">content</span>: <span class="string">'待办事项1'</span>,</div><div class="line">    <span class="attribute">completed</span>: false</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>虽说没有约束，但最好还是遵循<a href="https://github.com/acdlite/flux-standard-action" target="_blank" rel="external">规范</a></strong><br>如果需要新增一个代办事项，实际上就是将 code-2 中的 payload “写入” 到 state.todos 数组中（如何“写入”？在此留个悬念）：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** 本代码块记为 code-3 **/</span></div><div class="line">&#123;</div><div class="line">  <span class="attribute">counter</span>: <span class="number">0</span>,</div><div class="line">  <span class="attribute">todos</span>: [&#123;</div><div class="line">    <span class="attribute">id</span>: <span class="number">1</span>,</div><div class="line">    <span class="attribute">content</span>: <span class="string">'待办事项1'</span>,</div><div class="line">    <span class="attribute">completed</span>: false</div><div class="line">  &#125;]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>刨根问底，action 是谁生成的呢？</p>
<h2 id="Action-Creator"><a href="#Action-Creator" class="headerlink" title="Action Creator"></a>Action Creator</h2><p><div class="tip"><br>Action Creator 可以是同步的，也可以是异步的<br></div><br>顾名思义，Action Creator 是 action 的创造者，本质上就是一个函数，返回值是一个 action（对象）<br>例如下面就是一个 “新增一个待办事项” 的 Action Creator：<br><figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** 本代码块记为 code-4 **/</span></div><div class="line"><span class="built_in">var</span> id = <span class="number">1</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addTodo</span>(<span class="params">content</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attribute">type</span>: <span class="string">'ADD_TODO'</span>,</div><div class="line">    <span class="attribute">payload</span>: &#123;</div><div class="line">      <span class="attribute">id:</span><span class="string"> id</span>++,</div><div class="line">      <span class="attribute">content</span>: content, <span class="comment">// 待办事项内容</span></div><div class="line">      <span class="attribute">completed</span>: <span class="literal">false</span>  <span class="comment">// 是否完成的标识</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>将该函数应用到一个表单（假设 store 为全局变量，并引入了 jQuery ）：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">--!</span> 本代码块记为 <span class="attr">code-5</span> <span class="attr">--</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"todoInput"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">$(<span class="string">'#btn'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> content = $(<span class="string">'#todoInput'</span>).val() <span class="comment">// 获取输入框的值</span></div><div class="line">  <span class="keyword">var</span> action = addTodo(content) <span class="comment">// 执行 Action Creator 获得 action</span></div><div class="line">  store.dispatch(action) <span class="comment">// 改变 state 的不二法门：dispatch 一个 action！！！</span></div><div class="line">&#125;)</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>在输入框中输入 “待办事项2” 后，点击一下提交按钮，我们的 state 就变成了：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** 本代码块记为 code-6 **/</span></div><div class="line">&#123;</div><div class="line">  <span class="attribute">counter</span>: <span class="number">0</span>,</div><div class="line">  todos: [&#123;</div><div class="line">    id: <span class="number">1</span>,</div><div class="line">    content: <span class="string">'待办事项1'</span>,</div><div class="line">    completed: false</div><div class="line">  &#125;, &#123;</div><div class="line">    <span class="attribute">id</span>: <span class="number">2</span>,</div><div class="line">    content: <span class="string">'待办事项2'</span>,</div><div class="line">    completed: false</div><div class="line">  &#125;]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>通俗点讲，Action Creator 用于绑定到用户的操作（点击按钮等），其返回值 action 用于之后的 dispatch(action)</strong><br>刚刚提到过，action 明明就没有强制的规范，为什么 store.dispatch(action) 之后，<br>Redux 会明确知道是提取 action.payload，并且是对应写入到 state.todos 数组中？<br>又是谁负责“写入”的呢？悬念即将揭晓…</p>
<h2 id="Reducer"><a href="#Reducer" class="headerlink" title="Reducer"></a>Reducer</h2><p><strong>Reducer 必须是同步的纯函数</strong><br>用户每次 dispatch(action) 后，都会触发 reducer 的执行<br>reducer 的实质是一个函数，根据 action.type 来更新 state 并返回 nextState<br>最后会用 reducer 的返回值 nextState 完全替换掉原来的 state</p>
<p><div class="tip"><br>注意：上面的这个 “更新” 并不是指 reducer 可以直接对 state 进行修改<br>Redux 规定，须先复制一份 state，在副本 nextState 上进行修改操作<br>例如，可以使用 lodash 的 cloneDeep，也可以使用 Object.assign / map / filter/ … 等返回副本的函数<br></div><br>在上面 Action Creator 中提到的 待办事项的 reducer 大概是长这个样子 (为了容易理解，在此不使用 ES6 / Immutable.js)：<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">/** 本代码块记为 code-<span class="number">7</span> **/</div><div class="line">var initState = &#123;</div><div class="line">  counter: <span class="number">0</span>,</div><div class="line">  todos: []</div><div class="line">&#125;</div><div class="line"></div><div class="line">function reducer(<span class="keyword">state</span>, action) &#123;</div><div class="line">  // ※ 应用的初始状态是在第一次执行 reducer 时设置的 ※</div><div class="line">  if (!<span class="keyword">state</span>) <span class="keyword">state</span> = initState</div><div class="line"></div><div class="line">  switch (action.type) &#123;</div><div class="line">    case 'ADD_TODO':</div><div class="line">      var nextState = _.cloneDeep(<span class="keyword">state</span>) // 用到了 lodash 的深克隆</div><div class="line">      nextState.todos.push(action.payload)</div><div class="line">      return nextState</div><div class="line"></div><div class="line">    <span class="keyword">default</span>:</div><div class="line">    // 由于 nextState 会把原 <span class="keyword">state</span> 整个替换掉</div><div class="line">    // 若无修改，必须返回原 <span class="keyword">state</span>（否则就是 undefined）</div><div class="line">      return <span class="keyword">state</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>通俗点讲，就是 reducer 返回啥，state 就被替换成啥</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>store 由 Redux 的 createStore(reducer) 生成</li>
<li>state 通过 store.getState() 获取，本质上一般是一个存储着整个应用状态的对象</li>
<li>action 本质上是一个包含 type 属性的普通对象，由 Action Creator (函数) 产生</li>
<li>改变 state 必须 dispatch 一个 action</li>
<li>reducer 本质上是根据 action.type 来更新 state 并返回 nextState 的函数</li>
<li>reducer 必须返回值，否则 nextState 即为 undefined</li>
<li>实际上，state 就是所有 reducer 返回值的汇总（本教程只有一个 reducer，主要是应用场景比较简单）</li>
</ul>
<p><strong>Action Creator =&gt; action =&gt; store.dispatch(action) =&gt; reducer(state, action) =&gt; 原 state state = nextState</strong></p>
<p>原文地址：<a href="https://github.com/kenberkeley/redux-simple-tutorial" target="_blank" rel="external">Redux 简明教程</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Redux 是 JavaScript 状态容器，提供可预测化的状态管理。&lt;/p&gt;
&lt;p&gt;可以让你构建一致化的应用，运行于不同的环境（客户端、服务器、原生应用），并且易于测试。不仅于此，它还提供 超爽的开发体验，比如有一个&lt;a href=&quot;https://github.com/gaearon/redux-devtools&quot;&gt;时间旅行调试器可以编辑后实时预览&lt;/a&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="redux" scheme="http://blog.lengziyu.com/categories/redux/"/>
    
    
      <category term="redux" scheme="http://blog.lengziyu.com/tags/redux/"/>
    
  </entry>
  
  <entry>
    <title>React JSX语法</title>
    <link href="http://blog.lengziyu.com/2016/10/12/react-jsx-grammar/"/>
    <id>http://blog.lengziyu.com/2016/10/12/react-jsx-grammar/</id>
    <published>2016-10-12T12:00:40.000Z</published>
    <updated>2016-10-13T12:08:55.221Z</updated>
    
    <content type="html"><![CDATA[<p>JSX是React的核心组成部分，它使用XML标记的方式去直接声明界面，界面组件之间可以互相嵌套。<br><a id="more"></a><br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">JSX</span>=JavaScriptXML</div></pre></td></tr></table></figure></p>
<p>JSX可以理解为在JS中编写与XML类似的语言（与XML有本质上的不同），它的目的不是要在浏览器或者引擎中实现，也不是把其加入ECMAScript标准。它的目的是通过各种编译器将这些标记编译成标准的JS语言。</p>
<p>JSX是：</p>
<ul>
<li>基于ECMAScript的一种新特性（并不是一种新语言）</li>
<li>一种定义带属性树结构（DOM结构）的语法</li>
</ul>
<p>JSX不是：</p>
<ul>
<li>XML或者HTML</li>
<li>一种限制 （你不需要为了 React 使用 JSX，可以直接使用纯粹的 JS。但更建议使用 JSX , 因为它能定义简洁且我们熟知的包含属性的树状结构语法。）</li>
</ul>
<p>JSX的特点：</p>
<ul>
<li>类XML语法容易接受，结构清晰</li>
<li>增强JS语义</li>
<li>抽象程度高，屏蔽DOM操作，跨平台</li>
<li>代码模块化</li>
</ul>
<h2 id="JSX语法"><a href="#JSX语法" class="headerlink" title="JSX语法"></a>JSX语法</h2><p>JSX本身就和XML语法类似，可以定义属性以及子元素。唯一特殊的是可以用大括号来加入JavaScript表达式，例如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> HelloMessage = React.createClass(&#123;</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">HelloMessage</span> <span class="attr">name</span>=<span class="string">"lengziyu"</span> /&gt;</span>, mountNode);</span></div></pre></td></tr></table></figure></p>
<p><strong>一、元素名</strong><br>自定义出的组件标签名，React 的 JSX 里约定分别使用首字母大、小写来区分本地组件的类和 HTML 标签。render渲染时，会把大写的组件名定义为自定义组件，把小写的组件名定义为HTML自带的标签名进行渲染。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">var</span> HelloMessage =</div></pre></td></tr></table></figure></p>
<p>JSX的标签与函数名都是使用的驼峰命名。</p>
<p>htmlFor和className<br>for和class为js的保留字，在书写for与class时需要修改为htmlFor何className，注意都是使用的驼峰命名。</p>
<p>自闭合标签<br>在 JSX 中， <mycomponent> 是合法的，而 <mycomponent> 就不合法。 所有的标签都必须闭合，可以是自闭和的形式，也可以是常规的闭合。</mycomponent></mycomponent></p>
<div class="tip"><br>注意：所有 React component 都可以采用自闭和的形式，包括div等<br></div>

<p><strong>二、子节点</strong><br>组件与组件之间就像标签与标签之间可以有嵌套关系，与HTML不同的是可以在子节点中使用求值表达式。目前， 一个 component 的 render，只能返回一个节点。如果你需要返回一堆 div ， 那你必须将你的组件用 一个div 或 span 或任何其他的组件包裹。</p>
<p><div class="tip"><br>切记，JSX 会被编译成常规的 JS； 因此返回两个函数也就没什么意义了，同样地，千万不要在三元操作符中放入超过一个子节点。<br></div><br>如果往原生 HTML 元素里传入 HTML 规范里不存在的属性，React 不会显示它们。如果需要使用自定义属性，要加 data- 前缀。</p>
<p><strong>三、求值表达式</strong><br>要使用 JavaScript 表达式作为属性值，只需把这个表达式用一对大括号 ( { } ) 包起来，不要用引号 ( “ “ )。求值表达式本身与JSX没有多大关系，是JS中的特性。它是会返回值的表达式，与语句有本质上的不同，在编写JSX时，在 { } 中不能使用语句（if语句、for语句等等）。我们不能直接使用语句，但可以把语句包裹在函数求值表达式中运用。建议把函数表达式独立出来，在 { } 调用。</p>
<p>条件判断的写法<br>你没法在JSX中使用 if-else 语句，因为 JSX 只是函数调用和对象创建的语法糖。在 { } 中使用，是不合法的JS代码，不过可以采用三元操作表达式。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> HelloMessage = React.createClass(&#123;</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello &#123;this.props.name ？ this.props.name : "World"&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">HelloMessage</span> <span class="attr">name</span>=<span class="string">"xiaowang"</span> /&gt;</span>, document.body);</span></div></pre></td></tr></table></figure></p>
<p>可以使用比较运算符“ || ”来书写，如果左边的值为真，则直接返回左边的值，否则返回右边的值，与if的效果相同。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> HelloMessage = React.createClass(&#123;</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello &#123;this.props.name || "World"&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">HelloMessage</span> <span class="attr">name</span>=<span class="string">"xiaowang"</span> /&gt;</span>, document.body);</span></div></pre></td></tr></table></figure>
<p>也可以使用变量来书写：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> HelloMessage = React.createClass(&#123;</div><div class="line">  <span class="attr">getName</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.props.name)</div><div class="line">          <span class="keyword">return</span> <span class="keyword">this</span>.props.name</div><div class="line">      <span class="keyword">else</span></div><div class="line">          <span class="keyword">return</span> <span class="string">"world"</span></div><div class="line">  &#125;</div><div class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> name = <span class="keyword">this</span>.getName();</div><div class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello &#123;name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">HelloMessage</span> <span class="attr">name</span>=<span class="string">"xiaowang"</span> /&gt;</span>, document.body);</span></div></pre></td></tr></table></figure></p>
<p>其中可以把变量去掉，直接在 { } 中调用函数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello &#123;this.getName()&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>四、注释</strong><br>JSX 里添加注释很容易；它们只是 JS 表达式而已。你只需要在一个标签的子节点内(非最外层)小心地用 { } 包围要注释的部分。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> content = (</div><div class="line">  &lt;Nav&gt;</div><div class="line">    &#123;<span class="comment">/* 一般注释, 用 &#123;&#125; 包围 */</span>&#125;</div><div class="line">    &lt;Person</div><div class="line">      <span class="comment">/* 多</span></div><div class="line">         行</div><div class="line">         注释 */</div><div class="line">      name=&#123;<span class="built_in">window</span>.isLoggedIn ? <span class="built_in">window</span>.name : <span class="string">''</span>&#125; <span class="comment">// 行尾注释</span></div><div class="line">    /&gt;</div><div class="line">  &lt;/Nav&gt;</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p><strong>五、样式</strong><br>尽管在大部分场景下我们应该将样式写在独立的CSS文件中，但是有时对于某个特定组件而言，其样式相当简单而且独立，那么也可以将其直接定义在JSX中。在JSX中使用样式和真实的样式也很类似，通过style属性来定义，但和真实DOM不同的是，属性值不能是字符串而必须为对象，需要注意的是属性名同样需要驼峰命名法。例如：<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">div</span> style=&#123;&#123;color: <span class="string">'#ff0000'</span>, fontSize: <span class="string">'14px'</span>&#125;&#125;&gt;Hello World.&lt;/<span class="keyword">div</span>&gt;</div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> style = &#123;    </div><div class="line">    <span class="attr">color</span> : <span class="string">"red"</span>,</div><div class="line">    <span class="attr">border</span> : <span class="string">"1px solid #000"</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> HelloMessage = React.createClass(&#123;</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;style&#125;</span>&gt;</span><span class="tag">&lt;<span class="name">HelloMessage</span> <span class="attr">name</span>=<span class="string">"xiaowang"</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>, document.body);</span></div></pre></td></tr></table></figure>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本文主要介绍了声明组件的语法JSX。看似有点神秘的JSX背后的原理非常简单：只是一种用于创建组件的XML语法。让代码直观易懂是软件项目质量的重要保证之一，这意味着代码更加容易理解和维护，出现Bug时更容易调试和修复。因此React这种采用JSX语法，以声明式的方法来直观的定义用户界面的方式，正是其最大的价值。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JSX是React的核心组成部分，它使用XML标记的方式去直接声明界面，界面组件之间可以互相嵌套。&lt;br&gt;
    
    </summary>
    
      <category term="react" scheme="http://blog.lengziyu.com/categories/react/"/>
    
    
      <category term="react" scheme="http://blog.lengziyu.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>React 数据流 Props 和 State [组件沟通]</title>
    <link href="http://blog.lengziyu.com/2016/10/11/react-props-and-state-plus/"/>
    <id>http://blog.lengziyu.com/2016/10/11/react-props-and-state-plus/</id>
    <published>2016-10-11T10:50:20.000Z</published>
    <updated>2016-10-11T11:19:19.790Z</updated>
    
    <content type="html"><![CDATA[<p>组件沟通因为React的单向数据流方式会有所限制，下面述说组件之间的沟通方式。</p>
<a id="more"></a>
<p>可以分为以下 3 种：</p>
<ul>
<li>【父组件】向【子组件】传值；</li>
<li>【子组件】向【父组件】传值；</li>
<li>没有任何嵌套关系的组件之间传值（PS：比如：兄弟组件之间传值）</li>
</ul>
<h3 id="【父组件】向【子组件】传值"><a href="#【父组件】向【子组件】传值" class="headerlink" title="【父组件】向【子组件】传值"></a>【父组件】向【子组件】传值</h3><p>父组件更新子组件状态，通过传递<code>props</code>，就可以了。例子如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 父组件</span></div><div class="line"><span class="keyword">var</span> MyContainer = React.createClass(&#123;</div><div class="line">  <span class="attr">getInitialState</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">checked</span>: <span class="literal">true</span></div><div class="line">    &#125;;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;ToggleButton text="Toggle me" checked=&#123;this.state.checked&#125; /&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// 子组件</div><div class="line">var ToggleButton = React.createClass(&#123;</div><div class="line">  render: function () &#123;</div><div class="line">    // 从【父组件】获取的值</div><div class="line">    var checked = this.props.checked,</div><div class="line">        text = this.props.text;</div><div class="line"></div><div class="line">    return (</div><div class="line">        &lt;label&gt;&#123;text&#125;: &lt;input type="checkbox" checked=&#123;checked&#125; /&gt;&lt;/label&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>进一步讨论</p>
<p>如果组件嵌套层次太深，那么从外到内组件的交流成本就变得很高，通过 props 传递值的优势就不那么明显了。（PS：所以我建议尽可能的减少组件的层次，就像写 HTML 一样，简单清晰的结构更惹人爱）</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 父组件</span></div><div class="line"><span class="keyword">var</span> MyContainer = React.createClass(&#123;</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;Intermediate text="where is my son?" /&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// 子组件1：中间嵌套的组件</div><div class="line">var Intermediate = React.createClass(&#123;</div><div class="line">  render: function () &#123;</div><div class="line">    return (</div><div class="line">      &lt;Child text=&#123;this.props.text&#125; /&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// 子组件2：子组件1的子组件</div><div class="line">var Child = React.createClass(&#123;</div><div class="line">  render: function () &#123;</div><div class="line">    return (</div><div class="line">      &lt;span&gt;&#123;this.props.text&#125;&lt;/span&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="【子组件】向【父组件】传值"><a href="#【子组件】向【父组件】传值" class="headerlink" title="【子组件】向【父组件】传值"></a>【子组件】向【父组件】传值</h3><p>接下来，我们介绍【子组件】控制自己的 state 然后告诉【父组件】的点击状态，然后在【父组件】中展示出来。因此，我们添加一个 change 事件来做交互。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 父组件</span></div><div class="line"><span class="keyword">var</span> MyContainer = React.createClass(&#123;</div><div class="line">  <span class="attr">getInitialState</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">checked</span>: <span class="literal">false</span></div><div class="line">    &#125;;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">onChildChanged</span>: <span class="function"><span class="keyword">function</span> (<span class="params">newState</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.setState(&#123;</div><div class="line">      <span class="attr">checked</span>: newState</div><div class="line">    &#125;);</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> isChecked = <span class="keyword">this</span>.state.checked ? <span class="string">'yes'</span> : <span class="string">'no'</span>;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;div&gt;</div><div class="line">        &lt;div&gt;Are you checked: &#123;isChecked&#125;&lt;/div&gt;</div><div class="line">        &lt;ToggleButton text="Toggle me"</div><div class="line">          initialChecked=&#123;this.state.checked&#125;</div><div class="line">          callbackParent=&#123;this.onChildChanged&#125;</div><div class="line">          /&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// 子组件</div><div class="line">var ToggleButton = React.createClass(&#123;</div><div class="line">  getInitialState: function () &#123;</div><div class="line">    return &#123;</div><div class="line">      checked: this.props.initialChecked</div><div class="line">    &#125;;</div><div class="line">  &#125;,</div><div class="line">  onTextChange: function () &#123;</div><div class="line">    var newState = !this.state.checked;</div><div class="line">    this.setState(&#123;</div><div class="line">      checked: newState</div><div class="line">    &#125;);</div><div class="line">    // 这里要注意：setState 是一个异步方法，所以需要操作缓存的当前值</div><div class="line">    this.props.callbackParent(newState);</div><div class="line">  &#125;,</div><div class="line">  render: function () &#123;</div><div class="line">    // 从【父组件】获取的值</div><div class="line">    var text = this.props.text;</div><div class="line">    // 组件自身的状态数据</div><div class="line">    var checked = this.state.checked;</div><div class="line"></div><div class="line">    return (</div><div class="line">        &lt;label&gt;&#123;text&#125;: &lt;input type="checkbox" checked=&#123;checked&#125; onChange=&#123;this.onTextChange&#125; /&gt;&lt;/label&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>这样做其实是依赖 props 来传递事件的引用，并通过回调的方式来实现的，这样实现不是特别好，但是在没有任何工具的情况下也是一种简单的实现方式</p>
<p>这里会出现一个我们在之前讨论的问题，就是组件有多层嵌套的情况下，你必须要一次传入回调函数给 props 来实现子组件向父组件传值或者操作。</p>
<h3 id="兄弟组件之间传值"><a href="#兄弟组件之间传值" class="headerlink" title="兄弟组件之间传值"></a>兄弟组件之间传值</h3><p>当两个组件有相同的父组件时，就称为兄弟组件（堂兄也算的）。按照React单向数据流方式，我们需要借助父组件进行传递，通过父组件回调函数改变兄弟组件的<code>props</code>。</p>
<p><strong>方式一</strong><br>通过<code>props</code>传递父组件回调函数。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Brother1</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props)&#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">this</span>.state = &#123;&#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render()&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.props.refresh&#125;</span>&gt;</span></div><div class="line">            更新兄弟组件</div><div class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Brother2</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props)&#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">this</span>.state = &#123;&#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render()&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">         &#123;this.props.text || "兄弟组件未更新"&#125;</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props)&#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">this</span>.state = &#123;&#125;</div><div class="line">  &#125;</div><div class="line">  refresh()&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</div><div class="line">      <span class="keyword">this</span>.setState(&#123;</div><div class="line">        <span class="attr">text</span>: <span class="string">"兄弟组件沟通成功"</span>,</div><div class="line">      &#125;)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  render()&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;div&gt;</div><div class="line">        &lt;h2&gt;兄弟组件沟通&lt;/h2&gt;</div><div class="line">        &lt;Brother1 refresh=&#123;this.refresh()&#125;/&gt;</div><div class="line">        &lt;Brother2 text=&#123;this.state.text&#125;/&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>方式二</strong><br>但是如果组件层次太深，上面的兄弟组件沟通方式就效率低了（不建议组件层次太深）。<br>React提供了一种上下文方式（挺方便的），可以让子组件直接访问祖先的数据或函数，无需从祖先组件一层层地传递数据到子组件中。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Brother1</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props)&#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">this</span>.state = &#123;&#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render()&#123;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.context.refresh&#125;</span>&gt;</span></div><div class="line">            更新兄弟组件</div><div class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">Brother1.contextTypes = &#123;</div><div class="line">  <span class="attr">refresh</span>: React.PropTypes.any</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Brother2</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props)&#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">this</span>.state = &#123;&#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render()&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">         &#123;this.context.text || "兄弟组件未更新"&#125;</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">Brother2.contextTypes = &#123;</div><div class="line">  <span class="attr">text</span>: React.PropTypes.any</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props)&#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">this</span>.state = &#123;&#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  getChildContext()&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">refresh</span>: <span class="keyword">this</span>.refresh(),</div><div class="line">          <span class="attr">text</span>: <span class="keyword">this</span>.state.text,</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  refresh()&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</div><div class="line">      <span class="keyword">this</span>.setState(&#123;</div><div class="line">        <span class="attr">text</span>: <span class="string">"兄弟组件沟通成功"</span>,</div><div class="line">      &#125;)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  render()&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>兄弟组件沟通<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Brother1</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Brother2</span> <span class="attr">text</span>=<span class="string">&#123;this.state.text&#125;/</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">Parent.childContextTypes = &#123;</div><div class="line">  refresh: React.PropTypes.any,</div><div class="line">  text: React.PropTypes.any,</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="全局事件"><a href="#全局事件" class="headerlink" title="全局事件"></a>全局事件</h3><p>官网中提到可以使用全局事件来进行组件间的通信，官网推荐Flux（Facebook官方出的），还有Relay、Redux、trandux等第三方类库。这些框架思想都一致，都是统一管理组件state变化情况，达到数据可控目的。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>简单的组件交流我们可以使用上面非全局事件的简单方式，但是当项目复杂，组件间层次越来越深，上面的交流方式就不太合适（当然还是要用到的，简单的交流）。强烈建议使用Flux、Relay、Redux、trandux等类库其中一种，这些类库不只适合React，像Angular等都可以使用。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://www.alloyteam.com/2016/01/some-methods-of-reactjs-communication-between-components/" target="_blank" rel="external">ReactJS组件间沟通的一些方法</a></li>
<li><a href="http://www.alloyteam.com/2015/09/react-redux/" target="_blank" rel="external">React 数据流管理架构之 Redux 介绍</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;组件沟通因为React的单向数据流方式会有所限制，下面述说组件之间的沟通方式。&lt;/p&gt;
    
    </summary>
    
      <category term="react" scheme="http://blog.lengziyu.com/categories/react/"/>
    
    
      <category term="react" scheme="http://blog.lengziyu.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>React 数据流 Props 和 State [基础介绍]</title>
    <link href="http://blog.lengziyu.com/2016/10/10/react-props-and-state/"/>
    <id>http://blog.lengziyu.com/2016/10/10/react-props-and-state/</id>
    <published>2016-10-10T11:17:09.000Z</published>
    <updated>2016-10-11T11:21:38.531Z</updated>
    
    <content type="html"><![CDATA[<p>使用React我们首先要知道如何传递数据，组件如何沟通，才能展示我们想要的数据。下面的列子都是使用ES6语法，不懂的同学需要先学习ES6语法。</p>
<a id="more"></a>
<h3 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h3><p>React是单向数据流，从父节点传递到子节点（通过<code>props</code>）。如果顶层的某个<code>props</code>改变了，React会重渲染所有的子节点（未做性能优化）。严格意义上React只提供，也强烈建议使用这种数据交流方式。</p>
<h3 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h3><p><code>props</code>是<code>property</code>的缩写，可以理解为HTML标签的<code>attribute</code>。请把<code>props</code>当做只读的（不可以使用<code>this.props</code>直接修改<code>props</code>），<code>props</code>是用于整个组件树中传递数据和配置。在当前组件访问<code>props</code>，使用<code>this.props</code>。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> HelloWorld = React.createClass(&#123;</div><div class="line">    <span class="attr">render</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-title</span>=<span class="string">&#123;this.props.title&#125;</span>&gt;</span>&#123;this.props.content&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">        )</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">React.render(</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">HelloWorld</span> <span class="attr">title</span>=<span class="string">"this is title"</span> <span class="attr">content</span>=<span class="string">"this is content"</span>/&gt;</span>,</span></div><div class="line">    document.body</div><div class="line">);</div></pre></td></tr></table></figure></p>
<h3 id="state"><a href="#state" class="headerlink" title="state"></a>state</h3><p>每个组件都有属于自己的<code>state</code>，<code>state</code>和<code>props</code>的区别在于前者之只存在于组件内部，只能从当前组件调用<code>this.setState</code>修改<code>state</code>值（不可以直接修改<code>this.state</code>）。一般我们更新子组件都是通过改变<code>state</code>值，更新新子组件的<code>props</code>值从而达到更新。</p>
<p>那如何设置默认state?<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//React提供的crateClass创建方式</span></div><div class="line"><span class="keyword">var</span> Component = React.createClass(&#123;</div><div class="line">  getInitialState()&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="comment">//这里设置初始state值</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"><span class="comment">//ES6 &amp;&amp; ES7</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>()&#123;</div><div class="line">    <span class="keyword">this</span>.state = &#123;&#125;<span class="comment">//在ES6中的构造函数中初始化，可以之直接赋值，在其他方法中，只能使用this.setState</span></div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>再看一个例子，点击按钮，切换按钮的颜色：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ColorButton = React.createClass(&#123;</div><div class="line">    <span class="attr">getInitialState</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> &#123;<span class="attr">bColor</span>: <span class="string">'green'</span>&#125;;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">render</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;backgroundColor:</span> <span class="attr">this.state.bColor</span>&#125;&#125;&gt;</span>click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></div><div class="line">        )</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">handleClick</span>: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.setState(&#123;<span class="attr">bColor</span>: <span class="keyword">this</span>.state.bColor === <span class="string">'green'</span> ? <span class="string">'red'</span> : <span class="string">'green'</span>&#125;);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">React.render(</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">ColorButton</span> /&gt;</span>,</span></div><div class="line">    document.body</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>handleClick是用来处理我们点击事件的。</p>
<h3 id="state工作原理"><a href="#state工作原理" class="headerlink" title="state工作原理"></a>state工作原理</h3><p>通过调用setState(data, callback)方法，改变状态，就会触发React更新UI。大部分情况下，我们不需要提供callback函数。React会自动的帮我们更新UI。</p>
<h3 id="什么样的组件该有state"><a href="#什么样的组件该有state" class="headerlink" title="什么样的组件该有state"></a>什么样的组件该有state</h3><p>大部分的组件应该从props属性中获取数据并渲染。但有的时候组件得相应用户输入，同服务器交互，这些情况下会用到state。React的官方说法是：<strong>尽可能的保持你的组件无状态化</strong>。为了实现这个目标，得保持你的状态同业务逻辑分离，并减少冗余信息，尽可能保持组件的单一职责。</p>
<p>React官方推荐的一种模式就是：构建几个无状态的组件用来渲染数据，在这些之上构建一个有状态的组件同用户和服务交互，数据通过props传递给无状态的组件。我的理解大概就是这样：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> RenderComponent = React.createClass(&#123;</div><div class="line">    <span class="attr">render</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></div><div class="line">                &#123;</div><div class="line">                    this.props['data-list'].map(function (item) &#123;</div><div class="line">                        return (<span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>)</div><div class="line">                    &#125;)</div><div class="line">                &#125;</div><div class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">        )</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">var</span> StateComponent = React.createClass(&#123;</div><div class="line">    <span class="attr">getInitialState</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> &#123;<span class="attr">list</span>: [<span class="string">'xxx'</span>, <span class="string">'yyy'</span>]&#125;;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">render</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">RenderComponent</span> <span class="attr">data-list</span>=<span class="string">&#123;this.state.list&#125;/</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">        )</div><div class="line">    &#125;,</div><div class="line">    handleClick: function () &#123;</div><div class="line">        this.setState(&#123;list: [1, 2, 3]&#125;);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">React.render(</div><div class="line">    <span class="tag">&lt;<span class="name">StateComponent</span> /&gt;</span>,</div><div class="line">    document.body</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>UI交互会导致改变的数据。<br>state不应包含什么样的数据：1.计算过的数据；2.组件；3.从props复制的数据。<br>state应保含最原始的数据，比如说时间，格式化应该交给展现层去做。组件应在render方法里控制。</p>
<h3 id="props和state使用方式"><a href="#props和state使用方式" class="headerlink" title="props和state使用方式"></a>props和state使用方式</h3><div class="tip"><br>尽可能使用props当做数据源，state用来存放状态值（简单的数据），如复选框、下拉菜单等。<br></div>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用React我们首先要知道如何传递数据，组件如何沟通，才能展示我们想要的数据。下面的列子都是使用ES6语法，不懂的同学需要先学习ES6语法。&lt;/p&gt;
    
    </summary>
    
      <category term="react" scheme="http://blog.lengziyu.com/categories/react/"/>
    
    
      <category term="react" scheme="http://blog.lengziyu.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>React 学习笔记</title>
    <link href="http://blog.lengziyu.com/2016/10/09/react-early-know/"/>
    <id>http://blog.lengziyu.com/2016/10/09/react-early-know/</id>
    <published>2016-10-09T12:17:35.000Z</published>
    <updated>2016-10-10T13:25:00.961Z</updated>
    
    <content type="html"><![CDATA[<p>React是Facebook和Instagram用来创建用户界面的JavaScript库。很多人将React认为是MVC中的V。 React的创建是为了解决一个问题：如何构建一个数据交互频繁的大型应用程序？为了实现这个目标，React运用了两个思想：</p>
<a id="more"></a>
<h3 id="实时更新数据"><a href="#实时更新数据" class="headerlink" title="实时更新数据"></a>实时更新数据</h3><p>React使得展现数据变得简单，并且当数据改变时，React能自动保持UI的更新。</p>
<h3 id="构建通用组件"><a href="#构建通用组件" class="headerlink" title="构建通用组件"></a>构建通用组件</h3><p>React旨在构建通用组件。试试想，写React代码就是在构建组件。因为组件式封装的，所以组件使得代码的复用性、测试性和关注分离变得简单。</p>
<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p><strong>React.js</strong><br>React.js 是 React 的核心库，在应用中必须先加载核心库。</p>
<p><strong>ReactDOM.js</strong><br>ReactDOM.js 是 React 的 DOM 渲染器，React 将核心库和渲染器分离开了，为了在 web 页面中显示开发的组件，需要调用 ReactDOM.render 方法， 第一个参数是 React 组件，第二个参数为 HTMLElement。</p>
<p><strong>JSX</strong><br>JSX 是 React 自定义的语法，最终 JSX 会转化为 JS 运行于页面当中。</p>
<p><strong>组件</strong><br>组件是 React 中的核心概念，页面当中的所有元素都是通过 React 组件来表达， 我们将要写的 React 代码绝大部分都是在做 React 组件的开发。</p>
<p><strong>VIRTUAL DOM</strong><br>React 抽象出来的虚拟 DOM 树，虚拟树是 React 高性能的关键。</p>
<p><strong>单向数据流：one-way reactive data flow</strong><br>React 应用的核心设计模式，数据流向自顶向下</p>
<h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h3><p>创建一个简单的 <code>Hello World</code>，新建 index.html：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>React<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/react.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/JSXTransformer.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/app.js"</span> <span class="attr">type</span>=<span class="string">"text/jsx"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>React独创了一种JS、CSS和HTML混写的JSX格式，可以通过在页面中引入JSXTransformer这个文件进行客户端的编译，不过还是推荐在服务端编译。<br>app.js :<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> HelloMessage = React.createClass(&#123;</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">React.render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">HelloMessage</span> <span class="attr">name</span>=<span class="string">"John"</span> /&gt;</span>,</span></div><div class="line">  document.getElementById('container')</div><div class="line">);</div></pre></td></tr></table></figure></p>
<h3 id="React-createClass"><a href="#React-createClass" class="headerlink" title="React.createClass"></a>React.createClass</h3><p>用来创建一个组件类，编写React代码主要就是构建通用的组件。</p>
<h3 id="React-render"><a href="#React-render" class="headerlink" title="React.render"></a>React.render</h3><p>将React的模板转化为HTML，并插入到相应的DOM结构中。要注意的是，React的渲染函数并不是简单地把HTML元素复制到页面上，而是维护了一张Virtual Dom映射表。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;React是Facebook和Instagram用来创建用户界面的JavaScript库。很多人将React认为是MVC中的V。 React的创建是为了解决一个问题：如何构建一个数据交互频繁的大型应用程序？为了实现这个目标，React运用了两个思想：&lt;/p&gt;
    
    </summary>
    
    
      <category term="react" scheme="http://blog.lengziyu.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>webpack基本使用配置[基础篇]</title>
    <link href="http://blog.lengziyu.com/2016/10/08/webpack-use-expo/"/>
    <id>http://blog.lengziyu.com/2016/10/08/webpack-use-expo/</id>
    <published>2016-10-08T12:28:47.000Z</published>
    <updated>2016-10-10T13:25:06.540Z</updated>
    
    <content type="html"><![CDATA[<div class="foreword">webpack是一个前端资源模块化管理和打包工具。它可以将许多松散的模块按照依赖和规则打包成符合生产环境部署的前端资源。还可以将按需加载的模块进行代码分隔，等到实际需要的时候再异步加载。通过 loader 的转换，任何形式的资源都可以视作模块，比如 CommonJs 模块、 AMD 模块、 ES6 模块、CSS、图片、 JSON、Coffeescript、 LESS 等。还可以结合gulp使用，不冲突。<br></div>

<a id="more"></a>
<h3 id="webpack优势"><a href="#webpack优势" class="headerlink" title="webpack优势"></a>webpack优势</h3><ul>
<li>模块来源广泛，支持包括npm/bower等等的各种主流模块安装／依赖解决方案；</li>
<li>模块化规范支持全面，AMD/CommonJS一应具全；</li>
<li>插件机制完善，实现本身实现同样模块化，容易扩展；</li>
<li>Webpack 使用异步 I/O 和多级缓存提高运行效率，这使得 Webpack 能够以令人难以置信的速度快速增量编译。</li>
</ul>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>首先要安装 <a href="http://nodejs.org" target="_blank" rel="external">Node.js</a>， Node.js 自带了软件包管理器 npm，Webpack 需要 Node.js v0.6 以上支持，建议使用最新版 Node.js。<br>用 npm 全局安装 Webpack：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install webpack -g</div></pre></td></tr></table></figure></p>
<p>初始化配置文件 package.json ：<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">npm</span> init</div></pre></td></tr></table></figure></p>
<p>到项目目录安装，将 webpack 添加到 package.json ：<br><figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install webpack --<span class="built_in">save</span>-<span class="built_in">dev</span></div></pre></td></tr></table></figure></p>
<h3 id="webpack常用命令"><a href="#webpack常用命令" class="headerlink" title="webpack常用命令"></a>webpack常用命令</h3><ul>
<li>webpack 最基本的启动webpack命令</li>
<li>webpack -w 提供watch方法，实时进行打包更新</li>
<li>webpack -p 对打包后的文件进行压缩</li>
<li>webpack -d 提供SourceMaps，方便调试</li>
<li>webpack –colors 输出结果带彩色，比如：会用红色显示耗时较长的步骤</li>
<li>webpack –profile 输出性能数据，可以看到每一步的耗时</li>
<li>webpack –display-modules 默认情况下 node_modules 下的模块会被隐藏，加上这个参数可以显示这些被隐藏的模块</li>
</ul>
<p>前面的四个命令比较基础，使用频率会比较大，后面的命令主要是用来定位打包时间较长的原因，方便改进配置文件，提高打包效率。</p>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>首先创建一个静态页面 index.html 和一个 JS 入口文件 entry.js：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- index.html --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// entry.js</span></div><div class="line">document.<span class="built_in">write</span>(<span class="string">'It works.'</span>)</div></pre></td></tr></table></figure>
<p>然后编译 entry.js 并打包到 bundle.js：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ webpack entry<span class="selector-class">.js</span> bundle.js</div></pre></td></tr></table></figure></p>
<p>打包过程会显示日志：<br><figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Hash: e964f90ec65eb2c29bb9</div><div class="line">Version: webpack 1.12.2</div><div class="line"><span class="keyword">Time:</span> 54ms</div><div class="line">    Asset     Size  Chunks             Chunk Names</div><div class="line">bundle.js  1.42 kB       0  [emitted]  main</div><div class="line">   [0] ./entry.js 27 bytes &#123;0&#125; [built]</div></pre></td></tr></table></figure></p>
<p>用浏览器打开 index.html 将会看到 It works.</p>
]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;foreword&quot;&gt;webpack是一个前端资源模块化管理和打包工具。它可以将许多松散的模块按照依赖和规则打包成符合生产环境部署的前端资源。还可以将按需加载的模块进行代码分隔，等到实际需要的时候再异步加载。通过 loader 的转换，任何形式的资源都可以视作模块，比如 CommonJs 模块、 AMD 模块、 ES6 模块、CSS、图片、 JSON、Coffeescript、 LESS 等。还可以结合gulp使用，不冲突。&lt;br&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="webpack" scheme="http://blog.lengziyu.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://blog.lengziyu.com/2016/10/08/hello-world/"/>
    <id>http://blog.lengziyu.com/2016/10/08/hello-world/</id>
    <published>2016-10-08T10:57:39.537Z</published>
    <updated>2016-10-10T11:17:37.833Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
